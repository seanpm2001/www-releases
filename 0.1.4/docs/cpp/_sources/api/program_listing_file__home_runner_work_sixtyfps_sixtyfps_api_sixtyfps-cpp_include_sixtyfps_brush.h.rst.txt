
.. _program_listing_file__home_runner_work_sixtyfps_sixtyfps_api_sixtyfps-cpp_include_sixtyfps_brush.h:

Program Listing for File sixtyfps_brush.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_sixtyfps_sixtyfps_api_sixtyfps-cpp_include_sixtyfps_brush.h>` (``/home/runner/work/sixtyfps/sixtyfps/api/sixtyfps-cpp/include/sixtyfps_brush.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* LICENSE BEGIN
       This file is part of the SixtyFPS Project -- https://sixtyfps.io
       Copyright (c) 2021 Olivier Goffart <olivier.goffart@sixtyfps.io>
       Copyright (c) 2021 Simon Hausmann <simon.hausmann@sixtyfps.io>
   
       SPDX-License-Identifier: GPL-3.0-only
       This file is also available under commercial licensing terms.
       Please contact info@sixtyfps.io for more information.
   LICENSE END */
   #pragma once
   #include <string_view>
   #include "sixtyfps_color.h"
   #include "sixtyfps_brush_internal.h"
   #include "sixtyfps_string.h"
   
   namespace sixtyfps {
   
   namespace private_api {
   
   using cbindgen_private::types::GradientStop;
   
   class LinearGradientBrush
   {
   public:
       LinearGradientBrush() = default;
       LinearGradientBrush(float angle, const GradientStop *firstStop, int stopCount)
           : inner(make_linear_gradient(angle, firstStop, stopCount))
       {
       }
   
       float angle() const
       {
           // The gradient's first stop is a fake stop to store the angle
           return inner[0].position;
       }
   
       int stopCount() const { return int(inner.size()) - 1; }
   
       const GradientStop *stopsBegin() const { return inner.begin() + 1; }
       const GradientStop *stopsEnd() const { return inner.end(); }
   
   private:
       cbindgen_private::types::LinearGradientBrush inner;
   
       friend class sixtyfps::Brush;
   
       static SharedVector<private_api::GradientStop>
       make_linear_gradient(float angle, const GradientStop *firstStop, int stopCount)
       {
           SharedVector<private_api::GradientStop> gradient;
           gradient.push_back({ Color::from_argb_encoded(0).inner, angle });
           for (int i = 0; i < stopCount; ++i, ++firstStop)
               gradient.push_back(*firstStop);
           return gradient;
       }
   };
   
   }
   
   class Brush
   {
   public:
       Brush() : Brush(Color {}) { }
       Brush(const Color &color) : data(Inner::SolidColor(color.inner)) { }
       Brush(const private_api::LinearGradientBrush &gradient)
           : data(Inner::LinearGradient(gradient.inner))
       {
       }
   
       inline Color color() const;
   
       friend bool operator==(const Brush &a, const Brush &b) { return a.data == b.data; }
       friend bool operator!=(const Brush &a, const Brush &b) { return a.data != b.data; }
   
   private:
       using Tag = cbindgen_private::types::Brush::Tag;
       using Inner = cbindgen_private::types::Brush;
       Inner data;
   };
   
   Color Brush::color() const
   {
       Color result;
       switch (data.tag) {
       case Tag::SolidColor: {
           result.inner = data.solid_color._0;
           break;
       }
       case Tag::LinearGradient:
           if (data.linear_gradient._0.size() > 1) {
               result.inner = data.linear_gradient._0[1].color;
           }
           break;
       }
       return result;
   }
   
   }
