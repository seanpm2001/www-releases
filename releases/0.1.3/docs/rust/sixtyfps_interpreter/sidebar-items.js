initSidebarItems({"enum":[["Brush","(Re-export from corelib.)"],["CallCallbackError","Error returned by [`ComponentInstance::invoke_callback`]"],["DiagnosticLevel","Diagnostics level (error or warning)"],["GetPropertyError","Error returned by [`ComponentInstance::get_property`]"],["SetCallbackError","Error returned by [`ComponentInstance::set_callback`]"],["SetPropertyError","Error returned by [`ComponentInstance::set_property`]"],["Value","This is a dynamically typed value used in the SixtyFPS interpreter. It can hold a value of different types, and you should use the [`From`] or [`TryInto`] traits to access the value."],["ValueType","This enum represents the different public variants of the [`Value`] enum, without the contained values."]],"fn":[["print_diagnostics","Print the diagnostics to stderr"],["run_event_loop","Enters the main event loop. This is necessary in order to receive events from the windowing system in order to render to the screen and react to user input."]],"macro":[["ModelAdaptorVTable_static","Instantiate a static ModelAdaptorVTable for a given type and implements `vtable::HasStaticVTable<ModelAdaptorVTable>` for it."]],"mod":[["testing","This module contains a few function use by tests"]],"struct":[["Color","(Re-export from corelib.)"],["ComponentCompiler","ComponentCompiler is the entry point to the SixtyFPS interpreter that can be used to load .60 files or compile them on-the-fly from a string."],["ComponentDefinition","ComponentDefinition is a representation of a compiled component from .60 markup."],["ComponentInstance","This represent an instance of a dynamic component"],["Diagnostic","This structure represent a diagnostic emitted while compiling .60 code."],["SharedString","(Re-export from corelib.)"],["SharedVector","(Re-export from corelib.)"],["Struct","This type represents a runtime instance of structure in `.60`."],["WeakComponentInstance","A Weak references to a dynamic SixtyFPS components."],["Window","This type represents a window towards the windowing system, thatâ€™s used to render the scene of a component. It provides API to control windowing system specific aspects such as the position on the screen."]]});