var searchIndex = JSON.parse('{\
"slint":{"doc":"Slint","t":[13,13,13,4,4,3,8,16,4,13,3,8,4,13,3,13,13,3,13,13,3,3,3,8,8,3,3,3,8,13,13,13,13,3,3,6,13,8,13,4,13,13,6,6,3,4,3,3,3,13,13,3,3,3,4,13,3,3,13,3,6,4,4,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,12,11,11,11,12,12,10,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,14,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,8,4,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,8,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,10,12,12,12,12,12,12,12,12,12,12,8,3,3,3,3,8,16,12,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AfterRendering","AlreadySet","BeforeRendering","Brush","CloseRequestResponse","Color","ComponentHandle","Data","EventLoopError","EventLoopTerminated","FilterModel","Global","GraphicsAPI","HideWindow","Image","KeepWindowShown","LinearGradient","LoadImageError","Logical","Logical","LogicalPosition","LogicalSize","MapModel","Model","ModelExt","ModelNotify","ModelPeer","ModelRc","ModelTracker","NativeOpenGL","NoEventLoopProvider","Physical","Physical","PhysicalPosition","PhysicalSize","PointerEventButton","RadialGradient","RenderingNotifier","RenderingSetup","RenderingState","RenderingTeardown","Repeated","Rgb8Pixel","Rgba8Pixel","RgbaColor","SetRenderingNotifierError","SharedPixelBuffer","SharedString","SharedVector","SingleShot","SolidColor","SortModel","StandardListViewItem","Timer","TimerMode","Unsupported","VecModel","Weak","WebGL","Window","WindowEvent","WindowPosition","WindowSize","add","add_assign","alpha","alpha","apply_filter","as_any","as_any","as_any","as_any","as_any","as_argb_encoded","as_bytes","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice_mut","as_str","as_weak","attach_peer","attach_peer","blue","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brighter","brighter","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from_slice","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_strong","cmp","color","darker","darker","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dispatch_event","docs","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","filter","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_argb_encoded","from_argb_f32","from_argb_u8","from_iter","from_logical","from_logical","from_physical","from_physical","from_rgb8","from_rgb_f32","from_rgb_u8","from_rgba8","from_rgba8_premultiplied","from_slice","from_slice","get","get_hash","global","green","green","has_active_animations","hash","height","height","height","hide","hide","include_modules","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert","interpolate","interpolate","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","invoke_from_event_loop","is_default","is_default","is_default","is_default","is_default","is_default","is_default","is_empty","is_empty","is_transparent","is_visible","iter","iter","len","len","load_from_path","make_mut_bytes","make_mut_slice","make_mut_slice","map","map","model_tracker","model_tracker","model_tracker","model_tracker","model_tracker","model_tracker","new","new","new","new","new","new","new","new","new","new","new_ascending","notify","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","on_close_requested","partial_cmp","partial_cmp","path","platform","position","push","push","push_str","quit_event_loop","red","red","remove","request_redraw","reset","reset","reset","resize","restart","row_added","row_changed","row_count","row_count","row_count","row_count","row_count","row_count","row_data","row_data","row_data","row_data","row_data","row_data","row_data_tracked","row_data_tracked","row_removed","run","run_event_loop","running","scale_factor","set_position","set_rendering_notifier","set_row_data","set_row_data","set_row_data","set_row_data","set_row_data","set_row_data","set_size","set_vec","show","show","single_shot","size","size","size","slint","sort","sort","sort_by","sort_by","start","stop","stride","text","to_argb_f32","to_argb_u8","to_logical","to_logical","to_logical","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical","to_physical","to_physical","to_physical","to_string","to_string","track_row_count_changes","track_row_count_changes","track_row_data_changes","track_row_data_changes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfiltered_row","unsorted_row","unwrap","upgrade","upgrade_in_event_loop","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","width","width","window","with_capacity","write_str","x","x","y","y","canvas_element_id","context_type","get_proc_address","builtin_elements","builtin_enums","debugging_techniques","generated_code","langref","layouting","mcu","recipes","widgets","SampleComponent","as_weak","borrow","borrow_mut","clone","clone_into","clone_strong","deref","deref_mut","drop","from","get_counter","get_user_name","global","hide","init","into","invoke_hello","new","on_hello","run","set_counter","set_user_name","show","to_owned","try_from","try_into","type_id","vzip","window","AlreadySet","Alt","AltGr","Backspace","Backtab","CapsLock","Control","ControlR","Delete","DownArrow","End","Escape","EventLoopProxy","F1","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F2","F20","F21","F22","F23","F24","F3","F4","F5","F6","F7","F8","F9","Home","Insert","Key","KeyPressed","KeyReleased","Left","LeftArrow","Menu","Meta","MetaR","Middle","None","PageDown","PageUp","Pause","Platform","PointerEventButton","PointerExited","PointerMoved","PointerPressed","PointerReleased","PointerScrolled","Return","Right","RightArrow","ScrollLock","SetPlatformError","Shift","ShiftR","Stop","SysReq","Tab","UpArrow","WindowAdapter","WindowEvent","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clipboard_text","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_window_adapter","debug_log","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","duration_since_start","duration_until_next_timer_update","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","get_hash","hash","init","init","init","init","into","into","into","into","invoke_from_event_loop","is_default","new_event_loop_proxy","null_value","position","quit_event_loop","run_event_loop","set_clipboard_text","set_platform","software_renderer","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_timers_and_animations","vzip","vzip","vzip","vzip","window","button","button","delta_x","delta_y","position","position","position","position","text","text","LineBufferProvider","MinimalSoftwareWindow","PremultipliedRgbaColor","Rgb565Pixel","SoftwareRenderer","TargetPixel","TargetPixel","alpha","blend","blend","blend_slice","blue","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","draw_if_needed","drop","drop","drop","drop","eq","fmt","fmt","from","from","from","from","from","from","from_rgb","from_rgb","green","init","init","init","init","into","into","into","into","is_default","new","new","null_value","null_value","process_line","red","render","render_by_line","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","window"],"q":["slintslint::GraphicsAPI","","","slint::docs","","","","","","","","","slint::docs::generated_code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slint::platform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slint::platform::WindowEvent","","","","","","","","","","slint::platform::software_renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The scene of items was rendered, but the back buffer was …","There is already a rendering notifier set, multiple …","The scene of items is about to be rendered.  When OpenGL …","A brush is a data structure that is used to describe how a …","This enum describes whether a Window is allowed to be …","Color represents a color in the Slint run-time, …","This trait describes the common public API of a strongly …","The model data: A model is a set of row and each row has …","Error returned from the <code>invoke_from_event_loop()</code> and …","The event could not be sent because the event loop was …","Provides a filtered subset of rows by another <code>Model</code>.","This trait is used to obtain references to global …","This enum describes a low-level access to specific …","The Window will be hidden (default action)","An image type that can be displayed by the Image element. …","The close request is rejected and the window will be kept …","The linear gradient variant of a brush describes the …","Error generated if an image cannot be loaded for any …","The position in logical pixels.","The size in logical screen pixels.","A position represented in the coordinate space of logical …","A size represented in the coordinate space of logical …","Provides rows that are generated by a map function based …","A Model is providing Data for the Repeater or ListView …","Extension trait with extra methods implemented on types …","Dispatch notifications from a <code>Model</code> to one or several …","Represent a handle to a view that listens to changes to a …","A Reference counted <code>Model</code>.","This trait defines the interface that users of a model can …","The rendering is done using OpenGL.","The event could not be sent because the Slint platform …","The position in physical pixels.","The size in physical pixels.","A position represented in the coordinate space of physical …","A size represented in the coordinate space of physical …","Deprecated type alias for …","The radial gradient variant of a brush describes a circle …","Internal trait that’s used to map rendering state …","The window has been created and the graphics …","This enum describes the different rendering states, that …","The window will be destroyed and/or graphics resources …","A Repeated timer is fired repeatedly until it is stopped …","Convenience alias for a pixel with three color channels …","Convenience alias for a pixel with four color channels …","RgbaColor stores the red, green, blue and alpha components …","This enum describes the different error scenarios that may …","SharedPixelBuffer is a container for storing image data as …","A string type used by the Slint run-time.","SharedVector holds a reference-counted read-only copy of …","A SingleShot timer is fired only once.","The color variant of brush is a plain color that is to be …","Provides a sorted view of rows by another <code>Model</code>.","Represent an item in a StandardListView","Timer is a handle to the timer system that allows …","The TimerMode specifies what should happen after the timer …","The rendering backend does not support rendering notifiers.","A model backed by a <code>Vec&lt;T&gt;</code>","Struct that’s used to hold weak references of a Slint …","The rendering is done on a HTML Canvas element using WebGL.","This type represents a window towards the windowing …","Deprecated type alias for <code>slint::platform::WindowEvent</code>.","The position of the window in either physical or logical …","The size of a window represented in either physical or …","","","Returns the alpha channel of the color as u8 in the range …","The alpha component.","Manually reapply the filter. You need to run this e.g. if …","","Return something that can be downcast’ed (typically self)","Return something that can be downcast’ed (typically self)","","","Returns <code>(alpha, red, green, blue)</code> encoded as u32","Returns the pixels interpreted as raw bytes.","","","","","Return a slice to the array","Return a slice to the pixel data.","Return a mutable slice to the array. If the array was …","Return a slice to the string","Returns a new weak pointer.","Attach one peer. The peer will be notified when the model …","Attach one peer. The peer will be notified when the model …","Returns the blue channel of the color as u8 in the range …","The blue channel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new version of this color that has the …","Returns a new version of this brush that has the …","Clears the vector and removes all elements.","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SharedPixelBuffer by cloning and converting …","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of this handle that’s a strong reference.","","If the brush is SolidColor, the contained color is …","Returns a new version of this color that has the …","Returns a new version of this brush that has the …","Construct an empty model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dispatch a window event to the scene.","This is a pseudo module which only exist for documentation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extend the model with the content of the iterator","Appends all the elements in the slice to the model","Returns a new Model where the elements are filtered by the …","Returns a new Model where the elements are filtered by the …","","","","","","","","","","","","","","","","","","","","","","","","This macro is the same as <code>std::format!</code>, but it returns a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a color from an integer encoded as <code>0xAARRGGBB</code>","Construct a color from the alpha, red, green and blue …","Construct a color from the alpha, red, green and blue …","","Convert a given logical position to a physical position by …","Convert a given logical size to a physical size by …","Convert a given physical position to a logical position by …","Convert a given physical size to a logical size by …","Creates a new Image from the specified shared pixel …","Construct a color from the red, green and blue color …","Construct a color from the red, green and blue color …","Creates a new Image from the specified shared pixel …","Creates a new Image from the specified shared pixel …","Create a SharedVector from a slice","Allocate a new model from a slice","Returns a reference that’s tied to the life time of the …","","This function provides access to instances of global …","Returns the green channel of the color as u8 in the range …","The green channel.","Returns true if there is an animation currently active on …","","Returns the height of the image in pixels.","The height in logical.","The height in physical pixels;","Marks the window of this component to be hidden on the …","De-registers the window from the windowing system, …","Include the code generated with the slint-build crate from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a row at position index. All rows after that are …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Adds the specified function to an internal queue, notifies …","","","","","","","","Return true if the SharedVector is empty","Return true if the String is empty","Returns true if this brush contains a fully transparent …","Returns the visibility state of the window. This function …","Returns an iterator visiting all elements of the model.","Returns an iterator visiting all elements of the model.","Number of elements in the array","Size of the string, in bytes. This excludes the …","Load an Image from a path to a file containing an image","Returns the pixels interpreted as raw bytes.","Return a mutable slice to the array. If the array was …","Return a mutable slice to the pixel data. If the …","Returns a new Model where all elements are mapped by the …","Returns a new Model where all elements are mapped by the …","The implementation should return a reference to its …","","","","","","","Creates a new FilterModel based on the given <code>wrapped_model</code> …","Creates a new SortModel based on the given <code>wrapped_model</code> …","","Construct a new logical position from the given x and y …","Construct a new physical position from the given x and y …","Construct a new logical size from the given width and …","Construct a new physical size from the width and height …","Creates a new SharedPixelBuffer with the given width and …","Creates a new empty string","Creates a new SortModel based on the given <code>wrapped_model</code> …","Called to notify that rendering has reached a certain …","","","","","","","","","","","","","","","","","","This function allows registering a callback that’s …","","","Returns the path of the image on disk, if it was …","This module contains items that you need to use or …","Returns the position of the window on the screen, in …","Add an element to the array. If the array was shared, this …","Add a row at the end of the model","Append a string to this string","Schedules the main event loop for termination. This …","Returns the red channel of the color as u8 in the range …","The red channel.","Remove the row at the given index from the model","This function issues a request to the windowing system to …","Manually reapply the filter. You need to run this e.g. if …","Manually reapply the sorting. You need to run this e.g. if …","Notify the peer that the model has been changed in some …","Resize the array to the given size. If the array was …","Restarts the timer. If the timer was previously started by …","Notify the peers that rows were added","Notify the peers that a specific row was changed","The amount of row in the model","","","","","","Returns the data for a particular row. This function …","","","","","","Convenience function that calls …","Convenience function that calls …","Notify the peers that rows were removed","This is a convenience function that first calls <code>Self::show</code>…","Enters the main event loop. This is necessary in order to …","Returns true if the timer is running; false otherwise.","This function returns the scale factor that allows …","Sets the position of the window on the screen, in physical …","This function allows registering a callback that’s …","","","Sets the data for a particular row.","Sets the data for a particular row.","","","Resizes the window to the specified size on the screen, in …","Replace inner Vec with new data","Marks the window of this component to be shown on the …","Registers the window with the windowing system in order to …","Starts the timer with the duration, in order for the …","Returns the size of the window on the screen, in physical …","Returns the size of the image in pixels.","Returns the size of the Image in pixels.","This macro allows you to use the <code>.slint</code> design markup …","Returns a new Model where the elements are sorted …","Returns a new Model where the elements are sorted …","Returns a new Model where the elements are sorted by the …","Returns a new Model where the elements are sorted by the …","Starts the timer with the given mode and interval, in …","Stops the previously started timer. Does nothing if the …","Returns the number of pixels per line.","The text content of the item","Converts this color to an RgbaColor struct for easy …","Converts this color to an RgbaColor struct for easy …","Convert this physical position to a logical position by …","Convert this physical size to a logical size by dividing …","Turn the <code>WindowSize</code> into a <code>LogicalSize</code>.","","","","","","","","","","","","","","","","","","","","","","","","Convert this logical position to a physical position by …","Turn the <code>WindowPosition</code> into a <code>PhysicalPosition</code>.","Convert this logical size to a physical size by …","Turn the <code>WindowSize</code> into a <code>PhysicalSize</code>.","","","Register the model as a dependency to the current binding …","","Register a row as a dependency to the current binding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the row index of the underlying unfiltered model for …","Gets the row index of the underlying unsorted model for a …","Convenience function that returns a new strongly …","Returns a new strongly referenced component if some other …","Convenience function that combines <code>invoke_from_event_loop()</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the width of the image in pixels.","The width in logical pixels.","The width in physical pixels.","Returns the Window associated with this component. The …","Create a new empty array with a pre-allocated capacity in …","","The x coordinate.","The x coordinate.","The y coordinate.","The y coordinate.","The DOM element id of the HTML Canvas element used for …","The drawing context type used on the HTML Canvas element …","Use this function pointer to obtain access to the OpenGL …","Builtin Elements","Builtin Enums","Debugging Techniques","This module exists only to explain the API of the code …","The <code>.slint</code> language reference","Positioning and Layout of Elements","Slint on Microcontrollers","Recipes and Examples","Widgets","This an example of the API that is generated for a …","Returns a new weak pointer.","","","","","Returns a clone of this handle that’s a strong reference.","","","","Returns the argument unchanged.","A getter is generated for each property declared at the …","Returns the value of the <code>user_name</code> property declared in …","This function provides access to instances of global …","Marks the window of this component to be hidden on the …","","Calls <code>U::from(self)</code>.","For each callback declared at the root of the component, a …","Creates a new instance that is reference counted and …","For each callback declared at the root of the component, a …","This is a convenience function that first calls <code>Self::show</code>…","A setter is generated for each property declared at the …","Assigns a new value to the <code>user_name</code> property.","Marks the window of this component to be shown on the …","","","","","","Returns the Window associated with this component. The …","The platform has been initialized in an earlier call to …","","","","","","","","","","","","Trait that is returned by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Key</code> enum is used to map a specific key by name e.g. …","A key was pressed.","A key was pressed.","The left button.","","","","","The center button.","A button that is none of left, right or middle. For example","","","","This trait defines the interface between Slint and …","This enum describes the different types of buttons for a …","The pointer exited the window.","The position of the pointer has changed.","A pointer was pressed.","A pointer was released.","The wheel button of a mouse was rotated to initiate …","","The right button.","","","This enum describes the different error scenarios that may …","","","","","","","This trait represents the adaptation layer between the …","A event that describes user input.","","","","","","","","","Returns a copy of text stored in the system clipboard, if …","","","","","","","","","Instantiate a window for a component.","This function is called when debug() is used in .slint …","","","","","","","","","","","","","","Returns the current time as a monotonic duration since the …","Returns the duration before the next timer is expected to …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invoke the function from the event loop.","","Return an <code>EventLoopProxy</code> that can be used to send event to …","","The position of the cursor for this event, if any","Exits the event loop.","Spins an event loop and renders the visible windows.","Sends the given text into the system clipboard","Set the Slint platform abstraction.","This module contains the <code>SoftwareRenderer</code> and related …","","","","","","","","","","","","","","","","","","","Call this function to update and potentially activate any …","","","","","Returns the window API.","The button that was pressed.","The button that was released.","The amount of logical pixels to scroll in the horizontal …","The amount of logical pixels to scroll in the vertical …","","","","","The unicode representation of the key pressed.","The unicode representation of the key released.","This trait defines a bi-directional interface between …","This is a minimal adaptor for a Window that doesn’t have …","A color whose component have been pre-multiplied by alpha","A 16bit pixel that has 5 red bits, 6 green bits and  5 …","A Renderer that do the rendering in software","Trait for the pixels in the buffer","The pixel type of the buffer","","Blend a single pixel with a color","","Blend a color to all the pixel in the slice.","","","","","","","","","","","","","","","","","","","","","","","","","If the window needs to be redrawn, the callback will be …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Create a pixel from the red, gree, blue component in the …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new Renderer for a given window.","Instantiate a new MinimalWindowAdaptor","","","Called once per line, you will have to call the render_fn …","","Render the window to the given frame buffer.","Render the window, line by line, into the line buffer …","","","","","","","","","","","","","","","","","","",""],"i":[26,27,26,0,0,0,0,45,0,29,0,0,0,28,0,28,18,0,21,24,0,0,0,0,0,0,0,0,0,25,29,21,24,0,0,0,18,0,26,0,26,33,0,0,0,0,0,0,0,33,18,0,0,0,0,27,0,0,25,0,0,0,0,1,1,3,30,5,6,45,45,8,9,3,11,12,1,1,1,12,11,12,1,90,62,16,3,30,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,3,18,12,14,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,31,15,32,1,33,11,14,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,31,15,32,1,33,90,1,18,3,18,8,12,19,20,22,23,28,30,3,18,35,31,16,9,32,1,36,38,14,6,5,63,8,12,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,1,33,36,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,38,0,38,14,6,5,63,8,12,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,36,12,1,12,1,8,12,19,20,21,22,23,24,28,29,30,3,18,35,31,32,1,12,9,9,91,91,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,3,18,11,35,31,32,1,1,0,38,14,6,5,63,8,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,19,20,21,21,21,22,23,24,24,24,25,26,27,28,29,30,30,30,30,30,3,3,3,18,18,18,18,11,35,31,31,15,16,9,9,32,32,32,1,1,1,1,1,1,33,36,3,3,3,12,20,23,19,22,31,3,3,31,31,12,9,74,1,90,3,30,38,1,11,22,23,90,38,0,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,9,3,18,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,12,0,19,20,22,23,28,30,3,12,1,18,38,45,45,12,1,31,11,12,11,91,91,45,6,5,63,8,9,6,5,63,8,19,20,22,23,11,1,63,92,8,12,19,20,22,23,28,30,3,18,35,31,16,9,32,1,36,38,3,1,31,0,38,12,9,1,0,3,30,9,38,5,63,16,12,36,16,16,45,6,5,63,8,9,45,6,5,63,8,9,91,91,16,90,0,36,38,38,38,5,63,45,45,8,9,38,9,90,38,36,38,11,31,0,91,91,91,91,36,36,11,32,3,3,20,23,24,14,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,31,15,32,1,33,19,21,22,24,3,1,62,16,62,16,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,38,14,6,5,63,8,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,5,63,14,14,14,38,14,6,5,63,8,12,19,20,21,22,23,24,25,26,27,28,29,30,3,18,11,35,31,15,16,9,32,1,33,36,11,22,23,90,12,1,19,20,19,20,93,93,94,0,0,0,0,0,0,0,0,0,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,77,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,39,39,76,52,52,52,52,76,76,52,52,52,0,0,39,39,39,39,39,52,76,52,52,0,52,52,52,52,52,52,0,0,52,76,77,39,52,76,77,39,82,52,76,77,39,52,76,77,39,82,82,76,52,76,77,39,52,76,77,39,52,76,77,39,82,0,52,76,39,52,76,76,77,39,52,76,77,39,76,76,76,52,76,77,39,52,76,77,39,81,76,82,76,39,81,82,82,0,0,52,76,77,39,76,52,76,76,77,39,52,76,77,39,52,76,77,39,0,52,76,77,39,78,95,96,97,97,95,96,98,97,99,100,0,0,0,0,0,0,89,83,101,84,101,83,87,85,83,84,87,85,83,84,83,84,83,84,83,84,87,85,85,83,84,87,85,83,84,85,87,85,83,84,84,83,84,87,85,83,83,84,84,101,84,83,87,85,83,84,87,85,83,84,84,87,85,83,84,89,83,87,87,83,84,87,85,83,84,87,85,83,84,87,85,83,84,87,85,83,84,85],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2]],[3,4],0,[5],[6,7],[[],7],[[],7],[8,7],[9,7],[3,10],[11],[12],[1],[1,13],[1,2],[12],[11],[12],[1,2],[[],14],[15],[[16,15]],[3,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,17],3],[[18,17],18],[12],[14,14],[8,8],[12,12],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[3,3],[18,18],[11,11],[31,31],[15,15],[32,32],[1,1],[33,33],[[10,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],34],[18,3],[[3,17],3],[[18,17],18],[[],8],[[],12],[[],19],[[],20],[[],22],[[],23],[[],28],[[],30],[[],3],[[],18],[[],35],[[],31],[[],16],[[],9],[[],32],[[],1],[[],36],[37],[37],[37],[37],[37],[37],[37],[12],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[1],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[[38,39]],0,[37],[37],[37],[37],[37],[37],[12],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[36],[[]],[[]],[[]],[[]],[[8,8],40],[12,40],[[19,19],40],[[20,20],40],[[21,21],40],[[22,22],40],[[23,23],40],[[24,24],40],[[28,28],40],[[29,29],40],[[30,30],40],[[3,3],40],[[18,18],40],[[35,35],40],[[31,31],40],[[32,32],40],[1,40],[12],[9],[9],[[],5],[[],5],[[8,41],[[43,[42]]]],[[12,41],[[43,[42]]]],[[19,41],[[43,[42]]]],[[20,41],[[43,[42]]]],[[21,41],[[43,[42]]]],[[22,41],[[43,[42]]]],[[23,41],[[43,[42]]]],[[24,41],[[43,[42]]]],[[25,41],[[43,[42]]]],[[26,41],[[43,[42]]]],[[27,41],[[43,[42]]]],[[28,41],[[43,[42]]]],[[29,41],[[43,[42]]]],[[30,41],[[43,[42]]]],[[3,41],[[43,[42]]]],[[3,41],[[43,[42]]]],[[18,41],[[43,[42]]]],[[11,41],[[43,[42]]]],[[35,41],[[43,[42]]]],[[31,41],[[43,[42]]]],[[32,41],[[43,[42]]]],[[1,41],[[43,[42]]]],[[1,41],[[43,[42]]]],0,[[]],[[]],[[]],[[]],[[]],[44,8],[[]],[[[44,[45]]],8],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[20,21],[19,21],[[]],[[]],[[]],[23,24],[22,24],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[30,[4]]]],[[[30,[4]]],[[30,[17]]]],[3,[[30,[17]]]],[[]],[46,[[30,[17]]]],[[[30,[17]]],3],[[]],[[[30,[4]]],3],[47,18],[[]],[3,18],[48,18],[[]],[[]],[[]],[49,31],[[]],[[]],[[]],[[[51,[50]]],9],[2,32],[1,32],[[]],[52,1],[53,1],[54,1],[[]],[2,1],[53,1],[[]],[[]],[10,3],[[17,17,17,17],3],[[4,4,4,4],3],[[],12],[[19,17],20],[[22,17],23],[[20,17],19],[[23,17],22],[[[11,[[55,[4]]]]],31],[[17,17,17],3],[[4,4,4],3],[[[11,[[56,[4,4]]]]],31],[[[11,[[56,[4,4]]]]],31],[[],12],[[],8],[[]],[[],57],[[]],[3,4],0,[38,40],[1],[11,10],0,0,[[]],[38],0,[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[9,37]],[[3,3,17],3],[[18,18,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[[[0,[58,59]]],[[43,[29]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[12,40],[1,40],[18,40],[38,40],[[],60],[[],60],[12,37],[1,37],[61,[[43,[31,35]]]],[11],[12],[11],[[],6],[[],6],[[],62],[6,62],[5,62],[63,62],[8,62],[9,62],[[],6],[[],5],[[],63],[45,8],[[17,17],19],[[64,64],20],[[17,17],22],[[10,10],23],[[10,10],11],[[],1],[[],[[63,[65]]]],[[26,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[38,66]],[[3,3],[[67,[34]]]],[1,[[67,[34]]]],[31,[[67,[61]]]],0,[38,20],[12],[9],[[1,2]],[[],[[43,[29]]]],[3,4],0,[[9,37]],[38],[5],[[[63,[65]]]],[16],[[12,37]],[36],[[16,37,37]],[[16,37]],[[],37],[6,37],[5,37],[63,37],[8,37],[9,37],[37,67],[[6,37],67],[[5,37],67],[[63,37],67],[[8,37],67],[[9,37],67],[37,67],[37,67],[[16,37,37]],[[]],[[]],[36,40],[38,17],[[38,[68,[21]]]],[[38,66],[[43,[27]]]],[[5,37]],[[63,37]],[37],[37],[[8,37]],[[9,37]],[[38,[68,[24]]]],[[9,[68,[[51,[50]]]]]],[[]],[38],[[69,58]],[38,23],[11,[[71,[10,70]]]],[31,[[71,[10,70]]]],0,[[],[[63,[65]]]],[[],[[63,[65]]]],[[],63],[[],63],[[36,33,69,66]],[36],[11,10],0,[3,[[30,[17]]]],[3,[[30,[4]]]],[[20,17],19],[[23,17],22],[[24,17],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[19,17],20],[[21,17],20],[[22,17],23],[[24,17],23],[[],53],[[],53],[[]],[16],[37],[[16,37]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[8,[[43,[[44,[45]]]]]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[5,37],37],[[[63,[65]],37],37],[14],[14,67],[[14,[0,[58,59]]],[[43,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,10],0,0,[[],38],[37,12],[[1,2],[[43,[42]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[73,[[14,[73]]]],[[]],[[]],[73,73],[[]],[73,73],[37],[37],[37],[[]],[73,64],[73,1],[73,[[74,[73]]]],[73],[[],37],[[]],[73],[[],73],[[73,75]],[73],[[73,64]],[[73,1]],[73],[[]],[[],43],[[],43],[[],72],[[]],[73,38],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[67,[53]]]],[52,52],[76,76],[77,77],[39,39],[[]],[[]],[[]],[[]],[[],[[44,[78]]]],[79],[[],76],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[[],69],[[],[[67,[69]]]],[[52,52],40],[[76,76],40],[[39,39],40],[[52,41],[[43,[42]]]],[[76,41],[[43,[42]]]],[[76,41],[[43,[42]]]],[[77,41],[[43,[42]]]],[[39,41],[[43,[42]]]],[[]],[[]],[[]],[[]],[2,[[43,[76]]]],[[],57],[76],[[],37],[[],37],[[],37],[[],37],[[]],[[]],[[]],[[]],[[[80,[58,50]]],[[43,[29]]]],[[],40],[[],[[67,[[80,[81,50]]]]]],[[]],[39,[[67,[19]]]],[[],[[43,[29]]]],[[]],[2],[[[80,[82,50]]],[[43,[77]]]],0,[[]],[[]],[[]],[[]],[[],53],[[],43],[2,[[43,[76]]]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],72],[[],72],[[],72],[[],72],[[]],[[]],[[]],[[]],[[]],[[],38],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[83],[[84,83]],[83],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,83],[84,84],[[]],[[]],[[],83],[[],84],[37],[85],[37],[37],[37],[37],[37],[37],[37],[[85,58],40],[37],[37],[37],[37],[[84,84],40],[[83,41],[[43,[42]]]],[[84,41],[[43,[42]]]],[[]],[[]],[[]],[3,83],[[[55,[4]]],84],[[]],[[4,4,4]],[[4,4,4],84],0,[[],37],[[],37],[[],37],[[],37],[[]],[[]],[[]],[[]],[[],40],[[[86,[78]]],87],[[],[[44,[85]]]],[[]],[[]],[[37,[88,[37]],58]],0,[[87,37]],[[87,89]],[[]],[[]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],72],[[],72],[[],72],[[],72],[[]],[[]],[[]],[[]],[85,38]],"p":[[3,"SharedString"],[15,"str"],[3,"Color"],[15,"u8"],[3,"FilterModel"],[3,"MapModel"],[8,"Any"],[3,"ModelRc"],[3,"VecModel"],[15,"u32"],[3,"SharedPixelBuffer"],[3,"SharedVector"],[3,"CStr"],[3,"Weak"],[3,"ModelPeer"],[3,"ModelNotify"],[15,"f32"],[4,"Brush"],[3,"LogicalPosition"],[3,"PhysicalPosition"],[4,"WindowPosition"],[3,"LogicalSize"],[3,"PhysicalSize"],[4,"WindowSize"],[4,"GraphicsAPI"],[4,"RenderingState"],[4,"SetRenderingNotifierError"],[4,"CloseRequestResponse"],[4,"EventLoopError"],[3,"RgbaColor"],[3,"Image"],[3,"StandardListViewItem"],[4,"TimerMode"],[4,"Ordering"],[3,"LoadImageError"],[3,"Timer"],[15,"usize"],[3,"Window"],[4,"WindowEvent"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Rc"],[8,"Model"],[3,"HsvaColor"],[3,"LinearGradientBrush"],[3,"RadialGradientBrush"],[4,"ImageInner"],[3,"Global"],[3,"Vec"],[4,"Key"],[3,"String"],[15,"char"],[3,"RGB"],[3,"RGBA"],[15,"u64"],[8,"FnOnce"],[8,"Send"],[3,"ModelIterator"],[3,"Path"],[8,"ModelTracker"],[3,"SortModel"],[15,"i32"],[3,"AscendingSortHelper"],[8,"FnMut"],[4,"Option"],[8,"Into"],[3,"Duration"],[3,"UnknownUnit"],[3,"Size2D"],[3,"TypeId"],[3,"SampleComponent"],[8,"Global"],[8,"Fn"],[4,"PointerEventButton"],[4,"SetPlatformError"],[8,"WindowAdapter"],[3,"Arguments"],[3,"Box"],[8,"EventLoopProxy"],[8,"Platform"],[3,"PremultipliedRgbaColor"],[3,"Rgb565Pixel"],[3,"MinimalSoftwareWindow"],[3,"Weak"],[3,"SoftwareRenderer"],[3,"Range"],[8,"LineBufferProvider"],[8,"ComponentHandle"],[8,"ModelExt"],[8,"RenderingNotifier"],[13,"WebGL"],[13,"NativeOpenGL"],[13,"PointerPressed"],[13,"PointerReleased"],[13,"PointerScrolled"],[13,"PointerMoved"],[13,"KeyPressed"],[13,"KeyReleased"],[8,"TargetPixel"]]},\
"slint_build":{"doc":"This crate serves as a companion crate of the slint crate. …","t":[13,4,13,3,13,13,4,13,13,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsAbsolutePath","CompileError","CompileError","CompilerConfiguration","EmbedFiles","EmbedForSoftwareRenderer","EmbedResourcesKind","NotRunViaCargo","SaveError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compile","compile_with_config","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","embed_resources","eq","fmt","fmt","from","from","from","init","init","init","into","into","into","new","print_rustc_flags","provide","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_include_paths","with_style"],"q":["slint_build","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Paths specified in .slint files are made absolute and the …","Error returned by the <code>compile</code> function","Parse error. The error are printed in the stderr, and also …","The structure for configuring aspects of the compilation …","The raw files in .slint files are embedded in the …","File names specified in .slint files will be loaded by the …","How should the slint compiler embed images and fonts","Cannot read environment variable CARGO_MANIFEST_DIR or …","Cannot write the generated file","","","","","","","","","Compile the <code>.slint</code> file and generate rust code for it.","Same as <code>compile</code>, but allow to specify a configuration.","","","","","","","","","","","Selects how the resources such as images and font are …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new default configuration.","This function is for use the application’s build script, …","","","","","","","","","","","","","Create a new configuration that includes sets the include …","Create a new configuration that selects the style to be …"],"i":[1,0,4,0,1,1,0,4,4,6,1,4,6,1,4,1,1,0,0,6,6,1,4,6,1,4,6,1,4,6,1,4,4,6,1,4,6,1,4,6,1,4,6,0,4,1,4,6,1,4,6,1,4,6,1,4,6,6],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[[[3,[2]]],[[5,[4]]]],[[[3,[2]],6],[[5,[4]]]],[[],6],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[6,1],6],[[1,1],8],[[4,9],10],[[4,9],10],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[],6],[[],11],[12],[[]],[[],13],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],14],[[],14],[[],14],[[6,[16,[15]]],6],[[6,13],6]],"p":[[4,"EmbedResourcesKind"],[3,"Path"],[8,"AsRef"],[4,"CompileError"],[4,"Result"],[3,"CompilerConfiguration"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"Demand"],[3,"String"],[3,"TypeId"],[3,"PathBuf"],[3,"Vec"]]},\
"slint_interpreter":{"doc":"Slint interpreter library","tn":["AccessDenied","AfterRendering","AlreadySet","BeforeRendering","Bool","Bool","Brush","Brush","Brush","CloseRequestResponse","Color","ComponentCompiler","ComponentDefinition","ComponentHandle","ComponentInstance","Diagnostic","DiagnosticLevel","Error","EventLoopError","EventLoopTerminated","GetPropertyError","Global","GraphicsAPI","HideWindow","Image","Image","InvokeCallbackError","KeepWindowShown","LinearGradient","Logical","Logical","LogicalPosition","LogicalSize","Model","Model","ModelAdaptorVTable_static","NativeOpenGL","NoEventLoopProvider","NoSuchCallback","NoSuchCallback","NoSuchProperty","NoSuchProperty","Number","Number","Physical","Physical","PhysicalPosition","PhysicalSize","RadialGradient","RenderingNotifier","RenderingSetup","RenderingState","RenderingTeardown","SetCallbackError","SetPropertyError","SetRenderingNotifierError","SharedString","SharedVector","SolidColor","String","String","Struct","Struct","Struct","Unsupported","Value","ValueType","Void","Void","Warning","Weak","WebGL","Window","WindowPosition","WindowSize","WrongType","add","add_assign","alpha","as_argb_encoded","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice_mut","as_str","as_weak","as_weak","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brighter","brighter","build_from_path","build_from_source","callbacks","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_strong","clone_strong","cmp","color","create","darker","darker","default","default","default","default","default","default","default","default","default","default","default","default","default","definition","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diagnostics","dispatch_event","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_argb_encoded","from_argb_f32","from_argb_u8","from_iter","from_iter","from_logical","from_logical","from_physical","from_physical","from_rgb_f32","from_rgb_u8","from_slice","get","get_field","get_global_property","get_hash","get_property","global","global","global_callbacks","global_properties","globals","green","has_active_animations","hash","height","height","hide","hide","hide","highlight","include_paths","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","interpolate","interpolate","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","invoke_callback","invoke_from_event_loop","invoke_global_callback","is_default","is_default","is_default","is_default","is_default","is_default","is_default","is_empty","is_empty","is_transparent","is_visible","iter","len","len","level","line_column","make_mut_slice","message","name","new","new","new","new","new","new","notify","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","null_value","on_close_requested","partial_cmp","partial_cmp","position","print_diagnostics","properties","provide","provide","provide","provide","push","push_str","quit_event_loop","red","request_redraw","resize","run","run","run_event_loop","scale_factor","set_callback","set_field","set_file_loader","set_global_callback","set_global_property","set_include_paths","set_position","set_property","set_rendering_notifier","set_size","set_style","show","show","show","size","source_file","style","to_argb_f32","to_argb_u8","to_logical","to_logical","to_logical","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical","to_physical","to_physical","to_physical","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","upgrade","upgrade_in_event_loop","value_type","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","width","window","window","with_capacity","write_str","x","x","y","y","canvas_element_id","context_type","get_proc_address"],"q":["slint_interpreterslint_interpreter::GraphicsAPI","",""],"d":["Attempt to set an output property","The scene of items was rendered, but the back buffer was …","There is already a rendering notifier set, multiple …","The scene of items is about to be rendered.  When OpenGL …","Correspond to the <code>bool</code> type in .slint","Correspond to the <code>bool</code> type in .slint","(Re-export from corelib.) A brush is a data structure that …","Correspond to <code>brush</code> or <code>color</code> type in .slint.  For color, …","Correspond to <code>brush</code> or <code>color</code> type in .slint.  For color, …","This enum describes whether a Window is allowed to be …","(Re-export from corelib.) Color represents a color in the …","ComponentCompiler is the entry point to the Slint …","ComponentDefinition is a representation of a compiled …","This trait describes the common public API of a strongly …","This represent an instance of a dynamic component","This structure represent a diagnostic emitted while …","This enum describes the level or severity of a diagnostic …","The diagnostic found is an error that prevents successful …","Error returned from the <code>invoke_from_event_loop()</code> and …","The event could not be sent because the event loop was …","Error returned by <code>ComponentInstance::get_property</code>","This trait is used to obtain references to global …","This enum describes a low-level access to specific …","The Window will be hidden (default action)","Correspond to <code>image</code> type in .slint.","Correspond to the <code>image</code> type in .slint","Error returned by <code>ComponentInstance::invoke_callback</code>","The close request is rejected and the window will be kept …","The linear gradient variant of a brush describes the …","The position in logical pixels.","The size in logical screen pixels.","A position represented in the coordinate space of logical …","A size represented in the coordinate space of logical …","A model (that includes array in .slint)","A model (that includes array in .slint)","Instantiate a static ModelAdaptorVTable for a given type …","The rendering is done using OpenGL.","The event could not be sent because the Slint platform …","There is no callback with the given name","There is no callback with the given name","There is no property with the given name","There is no property with the given name","An <code>int</code> or a <code>float</code> (this is also used for unit based type …","An <code>int</code> or a <code>float</code> (this is also used for unit based type …","The position in physical pixels.","The size in physical pixels.","A position represented in the coordinate space of physical …","A size represented in the coordinate space of physical …","The radial gradient variant of a brush describes a circle …","Internal trait that’s used to map rendering state …","The window has been created and the graphics …","This enum describes the different rendering states, that …","The window will be destroyed and/or graphics resources …","Error returned by <code>ComponentInstance::set_callback</code>","Error returned by <code>ComponentInstance::set_property</code>","This enum describes the different error scenarios that may …","(Re-export from corelib.) A string type used by the Slint …","(Re-export from corelib.) SharedVector holds a …","The color variant of brush is a plain color that is to be …","Correspond to the <code>string</code> type in .slint","Correspond to the <code>string</code> type in .slint","This type represents a runtime instance of structure in …","An object","An object","The rendering backend does not support rendering notifiers.","This is a dynamically typed value used in the Slint …","This enum represents the different public variants of the …","The variant that expresses the non-type. This is the …","There is nothing in this value. That’s the default. For …","The diagnostic found is a warning.","Struct that’s used to hold weak references of a Slint …","The rendering is done on a HTML Canvas element using WebGL.","This type represents a window towards the windowing …","The position of the window in either physical or logical …","The size of a window represented in either physical or …","The property exist but does not have a type matching the …","","","Returns the alpha channel of the color as u8 in the range …","Returns <code>(alpha, red, green, blue)</code> encoded as u32","","","","","Return a slice to the array","Return a mutable slice to the array. If the array was …","Return a slice to the string","Returns a new weak pointer.","","Returns the blue channel of the color as u8 in the range …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new version of this color that has the …","Returns a new version of this brush that has the …","Compile a .slint file into a ComponentDefinition","Compile some .slint code into a ComponentDefinition","Returns the names of all publicly declared callbacks.","Clears the vector and removes all elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of this handle that’s a strong reference.","","","If the brush is SolidColor, the contained color is …","Creates a new instance of the component and returns a …","Returns a new version of this color that has the …","Returns a new version of this brush that has the …","","","","","","","","","","","","","","Return the <code>ComponentDefinition</code> that was used to create …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the diagnostics that were produced in the last …","Dispatch a window event to the scene.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Construct a color from an integer encoded as <code>0xAARRGGBB</code>","Construct a color from the alpha, red, green and blue …","Construct a color from the alpha, red, green and blue …","","","Convert a given logical position to a physical position by …","Convert a given logical size to a physical size by …","Convert a given physical position to a logical position by …","Convert a given physical size to a logical size by …","Construct a color from the red, green and blue color …","Construct a color from the red, green and blue color …","Create a SharedVector from a slice","Returns a reference that’s tied to the life time of the …","Get the value for a given struct field","Return the value for a property within an exported global …","","Return the value for a public property of this component.","This function provides access to instances of global …","","List of publicly declared callbacks in the exported global …","List of publicly declared properties in the exported …","Returns the names of all exported global singletons","Returns the green channel of the color as u8 in the range …","Returns true if there is an animation currently active on …","","The height in logical.","The height in physical pixels;","Marks the window of this component to be hidden on the …","De-registers the window from the windowing system, …","","Highlight the elements which are pointed by a given source …","Returns the include paths the component compiler is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Call the given callback with the arguments","Adds the specified function to an internal queue, notifies …","Call the given callback within a global singleton with the …","","","","","","","","Return true if the SharedVector is empty","Return true if the String is empty","Returns true if this brush contains a fully transparent …","Returns the visibility state of the window. This function …","Iterate over all the fields in this struct","Number of elements in the array","Size of the string, in bytes. This excludes the …","Return the level for this diagnostic","Returns a tuple with the line (starting at 1) and column …","Return a mutable slice to the array. If the array was …","Return a message for this diagnostic","The name of this Component as written in the .slint file","Returns a new ComponentCompiler.","Construct a new logical position from the given x and y …","Construct a new physical position from the given x and y …","Construct a new logical size from the given width and …","Construct a new physical size from the width and height …","Creates a new empty string","Called to notify that rendering has reached a certain …","","","","","","","","","","","","","","This function allows registering a callback that’s …","","","Returns the position of the window on the screen, in …","Print the diagnostics to stderr","List of publicly declared properties.","","","","","Add an element to the array. If the array was shared, this …","Append a string to this string","Schedules the main event loop for termination. This …","Returns the red channel of the color as u8 in the range …","This function issues a request to the windowing system to …","Resize the array to the given size. If the array was …","This is a convenience function that first calls <code>Self::show</code>…","","Enters the main event loop. This is necessary in order to …","This function returns the scale factor that allows …","Set a handler for the callback with the given name. A …","Set the value of a given struct field","Sets the callback that will be invoked when loading …","Set a handler for the callback in the exported global …","Set the value for a property within an exported global …","Sets the include paths used for looking up <code>.slint</code> imports …","Sets the position of the window on the screen, in physical …","Set the value for a public property of this component","This function allows registering a callback that’s …","Resizes the window to the specified size on the screen, in …","Sets the style to be used for widgets.","Marks the window of this component to be shown on the …","Registers the window with the windowing system in order to …","","Returns the size of the window on the screen, in physical …","return the path of the source file where this error is …","Returns the widget style the compiler is currently using …","Converts this color to an RgbaColor struct for easy …","Converts this color to an RgbaColor struct for easy …","Convert this physical position to a logical position by …","Convert this physical size to a logical size by dividing …","Turn the <code>WindowSize</code> into a <code>LogicalSize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert this logical position to a physical position by …","Turn the <code>WindowPosition</code> into a <code>PhysicalPosition</code>.","Convert this logical size to a physical size by …","Turn the <code>WindowSize</code> into a <code>PhysicalSize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function that returns a new strongly …","Returns a new strongly referenced component if some other …","Convenience function that combines <code>invoke_from_event_loop()</code>…","Returns the type variant that this value holds without the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width in logical pixels.","The width in physical pixels.","Returns the Window associated with this component. The …","","Create a new empty array with a pre-allocated capacity in …","","The x coordinate.","The x coordinate.","The y coordinate.","The y coordinate.","The DOM element id of the HTML Canvas element used for …","The drawing context type used on the HTML Canvas element …","Use this function pointer to obtain access to the OpenGL …"],"i":[24,36,37,36,20,21,0,20,21,0,0,0,0,0,0,0,0,27,0,39,0,0,0,38,20,21,0,38,11,31,34,0,0,20,21,0,35,39,25,26,23,24,20,21,31,34,0,0,11,0,36,0,36,0,0,0,0,0,11,20,21,0,20,21,37,0,0,20,21,27,0,35,0,0,0,24,1,1,3,3,6,1,1,1,6,6,1,99,9,3,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,3,11,12,12,15,6,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,99,9,1,11,15,3,11,12,21,22,6,27,29,30,32,33,38,3,11,1,9,12,43,9,8,20,21,22,15,23,24,25,26,6,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,1,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,12,43,12,43,9,8,20,21,22,15,23,24,25,26,6,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,6,1,6,1,20,21,22,23,24,25,26,6,27,29,30,31,32,33,34,38,39,3,11,1,6,20,21,22,23,23,24,24,25,25,26,26,6,27,28,28,29,30,31,32,33,34,35,36,37,38,39,3,3,11,1,1,12,43,9,8,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,15,23,24,25,26,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,27,28,29,30,31,31,31,32,33,34,34,34,35,36,37,38,39,3,3,3,11,11,11,11,1,1,1,1,1,1,3,3,3,22,6,30,33,29,32,3,3,6,91,22,9,1,9,99,9,15,15,15,3,43,1,32,33,99,43,9,9,12,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,3,11,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,6,9,0,9,27,29,30,32,33,38,3,6,1,11,43,22,6,1,28,28,6,28,15,12,29,30,32,33,1,100,12,21,22,6,27,29,30,32,33,38,3,11,1,43,3,1,43,0,15,23,24,25,26,6,1,0,3,43,6,99,9,0,43,9,22,12,9,9,12,43,9,43,43,12,99,43,9,43,28,12,3,3,30,33,34,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,29,31,32,34,23,24,25,26,28,3,1,12,43,9,8,20,21,22,22,15,23,24,25,26,6,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,3,11,11,1,1,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,8,8,8,21,12,43,9,8,20,21,22,15,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,3,11,1,32,33,99,9,6,1,29,30,29,30,101,101,102],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2]],[3,4],[3,5],[6],[1,7],[1,2],[1],[6],[6],[1,2],[[],8],[9,[[8,[9]]]],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,10],3],[[11,10],11],[[12,[14,[13]]],[[16,[15]]]],[[12,17,18],[[16,[15]]]],[15,19],[6],[8,8],[20,20],[21,21],[22,22],[15,15],[23,23],[24,24],[25,25],[26,26],[6,6],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[3,3],[11,11],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[[1,1],40],[11,3],[15,9],[[3,10],3],[[11,10],11],[[],12],[[],21],[[],22],[[],6],[[],27],[[],29],[[],30],[[],32],[[],33],[[],38],[[],3],[[],11],[[],1],[9,15],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[6],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[1],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[12,42],[[43,44]],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[6],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[41],[[]],[[]],[[]],[[]],[[20,20],45],[[21,21],45],[[22,22],45],[[23,23],45],[[24,24],45],[[25,25],45],[[26,26],45],[6,45],[[27,27],45],[[29,29],45],[[30,30],45],[[31,31],45],[[32,32],45],[[33,33],45],[[34,34],45],[[38,38],45],[[39,39],45],[[3,3],45],[[11,11],45],[1,45],[6],[[20,46],47],[[21,46],47],[[22,46],47],[[23,46],47],[[23,46],47],[[24,46],47],[[24,46],47],[[25,46],47],[[25,46],47],[[26,46],47],[[26,46],47],[[6,46],[[49,[48]]]],[[27,46],[[49,[48]]]],[[28,46],[[49,[48]]]],[[28,46],[[49,[48]]]],[[29,46],[[49,[48]]]],[[30,46],[[49,[48]]]],[[31,46],[[49,[48]]]],[[32,46],[[49,[48]]]],[[33,46],[[49,[48]]]],[[34,46],[[49,[48]]]],[[35,46],[[49,[48]]]],[[36,46],[[49,[48]]]],[[37,46],[[49,[48]]]],[[38,46],[[49,[48]]]],[[39,46],[[49,[48]]]],[[3,46],[[49,[48]]]],[[3,46],[[49,[48]]]],[[11,46],[[49,[48]]]],[[1,46],[[49,[48]]]],[[1,46],[[49,[48]]]],[[]],[[]],[[]],[[]],[50,20],[[]],[51,21],[52,21],[53,21],[22,21],[54,21],[11,21],[55,21],[56,21],[[[6,[10]]],21],[57,21],[58,21],[59,21],[60,21],[61,21],[62,21],[63,21],[64,21],[65,21],[1,21],[66,21],[41,21],[67,21],[68,21],[[]],[69,21],[5,21],[3,21],[70,21],[71,21],[72,21],[73,21],[74,21],[75,21],[76,21],[77,21],[78,21],[10,21],[45,21],[79,21],[80,21],[[],21],[81,21],[82,21],[83,21],[84,21],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[30,31],[29,31],[[]],[[]],[[]],[32,34],[33,34],[[]],[[]],[[]],[[]],[[]],[[]],[[[85,[10]]],3],[[[85,[4]]],3],[3,11],[86,11],[[]],[87,11],[88,1],[89,1],[17,1],[[]],[2,1],[17,1],[5,3],[[10,10,10,10],3],[[4,4,4,4],3],[90,22],[[],6],[[29,10],30],[[32,10],33],[[30,10],29],[[33,10],32],[[10,10,10],3],[[4,4,4],3],[[],6],[[]],[[22,2],[[16,[21]]]],[[9,2,2],[[49,[21,23]]]],[[],65],[[9,2],[[49,[21,23]]]],[[]],[9,[[91,[9]]]],[[15,2],[[16,[19]]]],[[15,2],[[16,[19]]]],[15,19],[3,4],[43,45],[1],0,0,[[]],[43],[9],[[9,18,5]],[12,42],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[3,3,10],3],[[11,11,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[[9,2],[[49,[21,26]]]],[[[0,[92,93]]],[[49,[39]]]],[[9,2,2],[[49,[21,26]]]],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[6,45],[1,45],[11,45],[43,45],[22,19],[6,41],[1,41],[28,27],[28],[6],[28,2],[15,2],[[],12],[[10,10],29],[[63,63],30],[[10,10],32],[[5,5],33],[[],1],[[36,35]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[43,94]],[[3,3],[[16,[40]]]],[1,[[16,[40]]]],[43,30],[[]],[15,19],[95],[95],[95],[95],[6],[[1,2]],[[],[[49,[39]]]],[3,4],[43],[[6,41]],[[]],[9],[[]],[43,10],[[9,2,96],[[49,[25]]]],[[22,17,21]],[[12,96]],[[9,2,2,96],[[49,[25]]]],[[9,2,2,21],[[49,[24]]]],[[12,[42,[18]]]],[[43,[97,[31]]]],[[9,2,21],[[49,[24]]]],[[43,94],[[49,[37]]]],[[43,[97,[34]]]],[[12,17]],[[]],[43],[9],[43,33],[28,[[16,[13]]]],[12,[[16,[17]]]],[3,[[85,[10]]]],[3,[[85,[4]]]],[[30,10],29],[[33,10],32],[[34,10],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[29,10],30],[[31,10],30],[[32,10],33],[[34,10],33],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[21,[[49,[22]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[21,[[49,[[6,[10]]]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[21,[[49,[3]]]],[[],49],[21,[[49,[11]]]],[[],49],[21,[[49,[1]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[[],98],[8],[8,16],[[8,[0,[92,93]]],[[49,[39]]]],[21,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],43],[9,43],[41,6],[[1,2],[[49,[48]]]],0,0,0,0,0,0,0],"p":[[3,"SharedString"],[15,"str"],[3,"Color"],[15,"u8"],[15,"u32"],[3,"SharedVector"],[3,"CStr"],[3,"Weak"],[3,"ComponentInstance"],[15,"f32"],[4,"Brush"],[3,"ComponentCompiler"],[3,"Path"],[8,"AsRef"],[3,"ComponentDefinition"],[4,"Option"],[3,"String"],[3,"PathBuf"],[8,"Iterator"],[4,"ValueType"],[4,"Value"],[3,"Struct"],[4,"GetPropertyError"],[4,"SetPropertyError"],[4,"SetCallbackError"],[4,"InvokeCallbackError"],[4,"DiagnosticLevel"],[3,"Diagnostic"],[3,"LogicalPosition"],[3,"PhysicalPosition"],[4,"WindowPosition"],[3,"LogicalSize"],[3,"PhysicalSize"],[4,"WindowSize"],[4,"GraphicsAPI"],[4,"RenderingState"],[4,"SetRenderingNotifierError"],[4,"CloseRequestResponse"],[4,"EventLoopError"],[4,"Ordering"],[15,"usize"],[3,"Vec"],[3,"Window"],[4,"WindowEvent"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[4,"Type"],[3,"PointerEvent"],[4,"ImageRendering"],[3,"Image"],[6,"LogicalLength"],[4,"PathData"],[4,"EasingCurve"],[3,"StandardListViewItem"],[3,"StateInfo"],[3,"KeyboardModifiers"],[3,"KeyEvent"],[3,"LayoutInfo"],[6,"Point"],[15,"i32"],[4,"TextHorizontalAlignment"],[15,"u64"],[15,"isize"],[15,"f64"],[4,"TextVerticalAlignment"],[4,"TextWrap"],[4,"TextOverflow"],[4,"EventResult"],[4,"FillRule"],[4,"StandardButtonKind"],[4,"DialogButtonRole"],[4,"PointerEventKind"],[4,"PointerEventButton"],[4,"MouseCursor"],[4,"ImageFit"],[15,"i64"],[4,"InputType"],[4,"LayoutAlignment"],[4,"PathEvent"],[4,"AccessibleRole"],[3,"Instant"],[3,"RgbaColor"],[3,"LinearGradientBrush"],[3,"RadialGradientBrush"],[15,"char"],[4,"Key"],[8,"IntoIterator"],[8,"Global"],[8,"FnOnce"],[8,"Send"],[8,"FnMut"],[3,"Demand"],[8,"Fn"],[8,"Into"],[3,"TypeId"],[8,"ComponentHandle"],[8,"RenderingNotifier"],[13,"WebGL"],[13,"NativeOpenGL"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
