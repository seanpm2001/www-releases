
name: Deploy to releases.slint.dev

on:
  push:
    paths: 'releases/**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./releases
    outputs:
      version: ${{ steps.identify-version.outputs.VERSION }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            releases

      - name: Identify Version
        id: identify-version
        run: |
          version=$(sed -n '1p' versions.txt)
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"

      - name: Copy latest release to docs
        run: |
            rsync -ua ${{ steps.identify-version.outputs.VERSION }} docs
            cp versions.txt docs

      - name: npm install
        run: |
          npm install

      - name: Generate a token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.READ_WRITE_APP_ID }}
          private-key: ${{ secrets.READ_WRITE_PRIVATE_KEY }}
          repositories: website
  
      - name: Clone website directory
        uses: actions/checkout@v4
        with:
          repository: slint-ui/website
          ref: prod
          path: releases/website
          token: ${{ steps.app-token.outputs.token }}

      - name: Generate docs.html and 404.html
        run: |
          mkdir -p website/output
          cd website && go run generator/generator.go -skip-agreements

      - name: Copy docs.html and 404.html
        run: |
          cp website/output/docs.html index.html
          cp website/output/docs.html docs/index.html
          cp website/output/404.html 404.html
          cp website/output/404.html docs/404.html
          rm -rf website

      - name: Install Netlify
        run: |
          npm install netlify-cli --save-dev
    
      - name: Install Dependencies
        run: |
          npm ci

      - name: Deploy to Netlify
        id: netlify_deploy
        run: |
          netlify deploy \
            --dir . \
            --site ${{ secrets.NETLIFY_RELEASES_SITE_ID }} \
            --auth ${{ secrets.NETLIFY_API_TOKEN }} \
            --prod

      - name: Set environment variables
        run: |
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_ENV

      - name: Publish latest release to docs
        run: |
            cd docs && npx wrangler@3 pages deploy . --project-name=docs  --commit-dirty=true

      - name: Update Cloudflare redirects to prefer docs.slint.dev
        run: |
            curl -X PATCH "https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/rulesets/${{ vars.CLOUDFLARE_RULESET_ID }}/rules/${{ vars.CLOUDFLARE_RULE_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json"
            -d '{
              "action": "redirect",
              "action_parameters": {
                "from_value": {
                  "preserve_query_string": false,
                  "status_code": 301,
                  "target_url": {
                    "value": "concat(\"https://releases.slint.dev\", http.request.uri.path)"
                  }
                }
              },
              "description": "docs.slint.dev to releases subdomain",
              "enabled": true,
              "expression": "(http.host eq \"docs.slint.dev\" and not starts_with(http.request.uri.path, \"/${{ steps.identify-version.outputs.VERSION }}\"))",
              "id": "${{ vars.CLOUDFLARE_RULE_ID }}",
              "ref": "${{ vars.CLOUDFLARE_RULE_ID }}"
            }'

  scrape-docs:
    uses: ./.github/workflows/docsearch-scrape.yml
    needs: build-and-deploy
    secrets: inherit
    with:
      version: ${{ needs.build-and-deploy.outputs.version }}
